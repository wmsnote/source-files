bind 0.0.0.0
# 开启安全防护
protected-mode yes
# 端口
port 6379
# 加速客户端连接，和linux内核有关系，依赖somaxconn and tcp_max_syn_backlog设置大小
tcp-backlog 511
# 客户端连接超时时间 0：表示禁用客户端连接超时
timeout 0
# 长连接存活的时间，新版默认值是300秒
tcp-keepalive 300

################################# TLS/SSL #####################################
# port 0
# tls-port 6379
# tls-cert-file redis.crt
# tls-key-file redis.key
# tls-dh-params-file redis.dh
# tls-ca-cert-file ca.crt
# tls-ca-cert-dir /etc/ssl/certs
# tls-auth-clients no
# tls-replication yes
# tls-cluster yes
# tls-protocols TLSv1.2
# tls-ciphers DEFAULT:!MEDIUM
# tls-ciphersuites TLS_CHACHA20_POLY1305_SHA256
# tls-prefer-server-ciphers yes

################################# GENERAL #####################################

# 守护进程运行 如果是docker需要设置为no，不然容器无法运行
# 如果开启，会生成一个pid文件 /var/run/redis.pid
daemonize no
# 可以通过upstart和systemd管理Redis守护进程[ no | systemd | upstart | auto ]
supervised no
# redis启动的时候，创建pid文件，stop的时候，删除pid文件
# 如果不指定pid文件，
# 1. [守护进程方式运行，生成默认的pid文件：/var/run/redis.pid]
# 2. [非守护进程运行，不生成pid文件]
pidfile /var/run/redis_6379.pid
# 日志4个级别[debug|verbose|notice|warning]
loglevel notice
# 日志输出文件,可以不指定(指定空字符串)
# 如果不指定,日志输出到标准输出,打印到屏幕上了
# 如果不指定,而且以守护进程的方式运行,日志呢?去哪了?去/dev/null黑洞了
# 如果开启配置[syslog-enabled yes],日志合并到系统日志上了
logfile ""
# DB的数量,默认客户端使用和连接的是0号数据库,可以在每个连接中切换数据库SELECT <dbid>
databases 16
# 默认redis logo只有在前台运行(非守护线程运行的时候)打印到屏幕上的,如果设置为yes,总是log logo
always-show-logo yes


################################ SNAPSHOTTING  ################################
# RDB数据保存在磁盘上
save 900 1
save 300 10
save 60 10000

# 如果最后一次rdb数据持久化失败了,rdb将停止保存到磁盘上,目的是为了引起运维人员的警觉,系统出问题了,不然就会莫名其妙的丢失数据
# 如果我们有自己强大的监控,可以监控到磁盘和redis server状态,实时的,我们可以关闭这个配置项
stop-writes-on-bgsave-error yes

# 压缩RDB文件,cpu开销大,节省磁盘空间,用cpu换取磁盘
rdbcompression yes

# 由于RDB版本5在文件末尾放置了CRC64校验和，这使得该格式更能抵抗损坏，但在保存和加载RDB文件时会降低性能（约10％），因此可以禁用它为获得最佳性能
# 在禁用校验和的情况下创建的RDB文件的校验和为零，这将告诉加载代码跳过校验
rdbchecksum yes

# rdb文件名
dbfilename dump.rdb

# 如果yes, 删除复制中使用的rdb文件
# 只有在开启aof关闭rdb的情况下,才生效
rdb-del-sync-files no

# RDB文件和aof文件保存的目录
dir ./

################################# REPLICATION #################################
# replicaof <masterip> <masterport>
# masterauth <master-password>
# masteruser <username>


replica-serve-stale-data yes
replica-read-only yes
repl-diskless-sync no
repl-diskless-sync-delay 5
repl-diskless-load disabled
# repl-ping-replica-period 10
# repl-timeout 60
repl-disable-tcp-nodelay no
# repl-backlog-size 1mb
# repl-backlog-ttl 3600
replica-priority 100
# min-replicas-to-write 3
# min-replicas-max-lag 10
# replica-announce-ip 5.5.5.5
# replica-announce-port 1234

############################### KEYS TRACKING #################################
# tracking-table-max-keys 1000000

################################## SECURITY ###################################
#user <username> ... acl rules ...

# 记录失败命令日志到内存中,占用内存,这里设置他的最大值 记录到外部文件中 [aclfile /etc/redis/users.acl]
acllog-max-len 128
# aclfile /etc/redis/users.acl

# redis6+,此选项只是在acl安全层上的一个向下兼容的配置:为默认用户设置密码
# 详情可以查看acl安全控制
requirepass foobared


################################### CLIENTS ####################################
# 设置同时连接的最大客户端数。 默认此限制设置为10000个客户端
# 一旦达到限制，Redis将关闭所有新发送的连接
maxclients 10000


############################## MEMORY MANAGEMENT ################################
# 最大内存限制
# 默认不设置或者设置为0,64位机器是不限制内存 一般设置要看服务器内存
# 默认情况下容器使用的资源是不受限制的(可以使用参数限制), docker可以使用主机的所有内存
# 1gb => 1024*1024*1024 bytes
# 1. 设定内存大小的，设置最大内存后，会发生oom, 需要同时开启lru机制(防止oom)，既然可以开启lru,说明数据可以丢失,
# 考虑关闭dump备份(dump备份会double内存)，启用aof备份机制
# 2. 针对不可以设定最大内存大小的，往往这类场景数据也是不可以丢失的，那么可以考虑做切片，引入codis、redis-cluster等方案解决单机内存瓶颈问题。
maxmemory <bytes>

# 内存达到最大值的时候,回收策略 默认 noeviction: 不回收,返回写command错误,读command不受影响
# volatile-lru -> 使用LRU算法删除一个键（只对设置了生存时间的键）
# allkeys-lru -> 使用LRU算法删除一个键
# volatile-random -> 随机删除一个键（只对设置了生存时间的键）
# allkeys-random -> 随机删除一个键
# volatile-ttl -> 删除生存时间最近的一个键
# noeviction -> 不删除，直接在写操作时返回错误（默认值）
# LRU: Least Recently Used
# LFU: Least Frequently Used
maxmemory-policy noeviction

# 回收样例大小,默认是5
# 以上所有的回收策略都是不准确的,都是依据一个随机样本基础上做的回收,这个随机样本的大小就是下面设置的大小
# 一般这个值设置的越大,越精确但是速度也越慢,
# 样本大小设置的越小,速度越快,精度也低
maxmemory-samples 5
# replica-ignore-maxmemory yes
# active-expire-effort 1

############################# LAZY FREEING ####################################
lazyfree-lazy-eviction no
lazyfree-lazy-expire no
lazyfree-lazy-server-del no
replica-lazy-flush no
lazyfree-lazy-user-del no

############################## APPEND ONLY MODE ###############################

# 默认是no
appendonly yes
# aof文件名
appendfilename "appendonly.aof"
# 开启aof 3个选项 [no | everysec | always]
appendfsync everysec

no-appendfsync-on-rewrite no


auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

aof-load-truncated yes

# AOF和rdb混合使用开关，需要手动改为yes，混合使用和同时使用是有区别的，混合使用可以节省开销同时发挥更好的优势
aof-use-rdb-preamble yes

################################ LUA SCRIPTING  ###############################
lua-time-limit 5000

################################## SLOW LOG ###################################
# 设置慢日志时间,单位 microseconds 1s = 1000000
slowlog-log-slower-than 10000
# 日志队列长度,当有新的日志进queue,旧的就被删除了
slowlog-max-len 128


################################ LATENCY MONITOR ##############################

# 延迟监控系统(对不同的操作进行采样),当执行操作大于当前配置的值(单位纳秒)0代表关闭
latency-monitor-threshold 0


############################# EVENT NOTIFICATION ##############################
# 禁用
notify-keyspace-events ""

############################### ADVANCED CONFIG ###############################
hash-max-ziplist-entries 512
hash-max-ziplist-value 64
list-max-ziplist-size -2
list-compress-depth 0
set-max-intset-entries 512
zset-max-ziplist-entries 128
zset-max-ziplist-value 64
hll-sparse-max-bytes 3000
stream-node-max-bytes 4096
stream-node-max-entries 100
activerehashing yes
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit replica 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60
hz 10
dynamic-hz yes
aof-rewrite-incremental-fsync yes
rdb-save-incremental-fsync yes

