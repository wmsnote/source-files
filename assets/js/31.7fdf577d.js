(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{357:function(a,t,n){"use strict";n.r(t);var s=n(9),e=Object(s.a)({},(function(){var a=this,t=a.$createElement,n=a._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h2",{attrs:{id:"一文秒懂-java-threadlocalrandom"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一文秒懂-java-threadlocalrandom"}},[a._v("#")]),a._v(" 一文秒懂 Java ThreadLocalRandom")]),a._v(" "),n("p",[a._v("随机数生成是一个非常常见的操作，而且 Java 也提供了 java.util.Random 类用于生成随机数，")]),a._v(" "),n("p",[a._v("而且呢，这个类也是线程安全的，就是有一点不好，在多线程下，它的性能不佳。")]),a._v(" "),n("p",[a._v("为什么多线程下，Random 的性能不佳？")]),a._v(" "),n("p",[a._v("因为，它采用了多个线程共享一个 Random 实例。这样就会导致多个线程争用。")]),a._v(" "),n("p",[a._v("为了解决这个问题，Java 7 引入了 java.util.concurrent.ThreadLocalRandom 类，用于在多线程环境中生成随机数。")]),a._v(" "),n("h3",{attrs:{id:"threadlocalrandom-via-random"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#threadlocalrandom-via-random"}},[a._v("#")]),a._v(" ThreadLocalRandom Via Random")]),a._v(" "),n("p",[a._v("ThreadLocalRandom 是 ThreadLocal 类和 Random 类的组合，它与当前线程隔离，通过简单地避免对 Random 对象的任何并发访问，在多线程环境中实现了更好的性能。")]),a._v(" "),n("p",[a._v("也就是说，相比于 java.util.Random 类全局的提供随机数生成， "),n("strong",[a._v("使用 ThreadLocalRandom，一个线程获得的随机数不受另一个线程的影响。")])]),a._v(" "),n("p",[a._v("另一个与 Random 类不同的是，ThreadLocalRandom 不支持显式设置种子。因为它重写了从 Random 继承的 setSeed(long seed) 方法，会在调用时始终抛出 UnsupportedOperationException。")]),a._v(" "),n("p",[a._v("接下来我们看看如何使用 ThreadLocalRandom 生成随机 int、long 和 double 值。")]),a._v(" "),n("h3",{attrs:{id:"quick-start"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#quick-start"}},[a._v("#")]),a._v(" Quick Start")]),a._v(" "),n("p",[a._v("根据 Oracle 文档，我们只需要调用 ThreadLocalRandom.current() 方法，就能返回当前线程的 ThreadLocalRandom 实例。然后，我们可以通过实例的相关方法来生成随机值。")]),a._v(" "),n("p",[a._v("比如下面的代码，生成一个没有任何边界的随机 int 值")]),a._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" unboundedRandomValue "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocalRandom")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("current")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("nextInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br")])]),n("blockquote",[n("p",[a._v("其实是有边界的，它的边界就是 int 的边界。")])]),a._v(" "),n("p",[a._v("接下来，我们看看如何生成有边界的随机 int 值，这意味着我们需要传递边界下限和边界上限作为参数")]),a._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" boundedRandomValue "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocalRandom")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("current")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("nextInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br")])]),n("p",[a._v("请注意，这是一个左闭右开区间，也就是说，上面的实例生成的随机数在 [0,100) 之间，包含了 0 但不包含 100。")]),a._v(" "),n("p",[a._v("同样的，我们可以通过调用 nextLong() 和 nextDouble() 方法生成 long 和 double 类型的随机值，调用方式与上面示例中 nextInt() 类似。")]),a._v(" "),n("p",[a._v("Java 8 还添加了 nextGaussian() 方法从生成器序列中生成下一个正态分布的值，其值范围在 0.0 和 1.0 之间。")]),a._v(" "),n("p",[a._v("与 Random 方法类似，ThreadLocalRandom 也提供了 doubles() 、ints() 和 longs() 方法生成一序列流式 ( stream ) 的随机值。")]),a._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[a._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 0 到 100 的随机数 10 个")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IntStream")]),a._v(" intStream "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Random")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("ints")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);