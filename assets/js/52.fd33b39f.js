(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{377:function(s,a,n){"use strict";n.r(a);var t=n(9),e=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("本章介绍 Bash 的最基本语法。")]),s._v(" "),n("h2",{attrs:{id:"_1-echo-命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-echo-命令"}},[s._v("#")]),s._v(" 1. echo 命令")]),s._v(" "),n("p",[s._v("由于后面的例子会大量用到echo命令，这里先介绍这个命令。")]),s._v(" "),n("p",[s._v("echo命令的作用是在屏幕输出一行文本，可以将该命令的参数原样输出。")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" hello world\nhello world\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("上面例子中，echo的参数是hello world，可以原样输出。")]),s._v(" "),n("p",[s._v("如果想要输出的是多行文本，即包括换行符。这时需要把多行文本放在引号里面。")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<HTML>\n    <HEAD>\n          <TITLE>Page Title</TITLE>\n    </HEAD>\n    <BODY>\n          Page body.\n    </BODY>\n</HTML>"')]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("上面例子中，echo可以原样输出多行文本。")]),s._v(" "),n("h3",{attrs:{id:"_1-1-n参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-n参数"}},[s._v("#")]),s._v(" 1.1 -n参数")]),s._v(" "),n("p",[s._v("默认情况下，echo输出的文本末尾会有一个回车符。-n参数可以取消末尾的回车符，使得下一个提示符紧跟在输出内容的后面。")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" -n hello world\nhello world$\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("上面例子中，world后面直接就是下一行的提示符$。")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" b\na\nb\n\n$ "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" -n a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" b\nab\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("上面例子中，-n参数可以让两个echo命令的输出连在一起，出现在同一行。")]),s._v(" "),n("h3",{attrs:{id:"_1-2-e参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-e参数"}},[s._v("#")]),s._v(" 1.2 -e参数")]),s._v(" "),n("p",[s._v("-e参数会解释引号（双引号和单引号）里面的特殊字符（比如换行符\\n）。\n如果不使用-e参数，即默认情况下，引号会让特殊字符变成普通字符，echo不解释它们，原样输出。")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello'),n("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('World"')]),s._v("\nHello"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("nWorld\n\n\n$ "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" -e "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello'),n("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('World"')]),s._v("\nHello\nWorld\n\n\n$ "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" -e "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Hello"),n("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("World'")]),s._v("\nHello\nWorld\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("上面代码中，-e参数使得\\n解释为换行符，导致输出内容里面出现换行。")]),s._v(" "),n("h2",{attrs:{id:"_2-命令格式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-命令格式"}},[s._v("#")]),s._v(" 2. 命令格式")]),s._v(" "),n("p",[s._v("命令行环境中，主要通过使用 Shell 命令，进行各种操作。Shell 命令基本都是下面的格式。")]),s._v(" "),n("p",[n("code",[s._v("$ command [ arg1 ... [ argN ]]")])]),s._v(" "),n("p",[s._v("上面代码中，command是具体的命令或者一个可执行文件，arg1 ... argN是传递给命令的参数，它们是可选的。")]),s._v(" "),n("p",[n("code",[s._v("$ ls -l")]),s._v("\n上面这个命令中，ls是命令，-l是参数。")]),s._v(" "),n("p",[s._v("有些参数是命令的配置项，这些配置项一般都以一个连词线开头，比如上面的-l。同一个配置项往往有长和短两种形式，比如-l是短形式，--list是长形式，\n它们的作用完全相同。短形式便于手动输入，长形式一般用在脚本之中，可读性更好，利于解释自身的含义。")]),s._v(" "),n("p",[n("code",[s._v("$ ls -r")])]),s._v(" "),n("p",[n("code",[s._v("$ ls --reverse")])]),s._v(" "),n("p",[s._v("上面命令中，-r是短形式，--reverse是长形式，作用完全一样。前者便于输入，后者便于理解。")]),s._v(" "),n("p",[s._v("Bash 单个命令一般都是一行，用户按下回车键，就开始执行。有些命令比较长，写成多行会有利于阅读和编辑，这时可以在每一行的结尾加上反斜杠，Bash 就会将下一行跟当前行放在一起解释。")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" foo bar\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 等同于")]),s._v("\n$ "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" foo "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\nbar\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"_3-空格"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-空格"}},[s._v("#")]),s._v(" 3. 空格")]),s._v(" "),n("p",[s._v("Bash 使用空格（或 Tab 键）区分不同的参数。")]),s._v(" "),n("p",[n("code",[s._v("$ command foo bar")])]),s._v(" "),n("p",[s._v("上面命令中，foo和bar之间有一个空格，所以 Bash 认为它们是两个参数。")]),s._v(" "),n("p",[s._v("如果参数之间有多个空格，Bash 会自动忽略多余的空格。")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" this is a     "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v("\nthis is a "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("上面命令中，a和test之间有多个空格，Bash 会忽略多余的空格。")]),s._v(" "),n("h2",{attrs:{id:"_4-分号"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-分号"}},[s._v("#")]),s._v(" 4. 分号")]),s._v(" "),n("p",[s._v("分号（;）是命令的结束符，使得一行可以放置多个命令，上一个命令执行结束后，再执行第二个命令。")]),s._v(" "),n("p",[n("code",[s._v("$ clear; ls")]),s._v("\n上面例子中，Bash 先执行clear命令，执行完成后，再执行ls命令。")]),s._v(" "),n("p",[s._v("注意，使用分号时，第二个命令总是接着第一个命令执行，不管第一个命令执行成功或失败。")]),s._v(" "),n("h2",{attrs:{id:"_5-命令的组合符-和"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-命令的组合符-和"}},[s._v("#")]),s._v(" 5. 命令的组合符&&和||")]),s._v(" "),n("p",[s._v("除了分号，Bash 还提供两个命令组合符"),n("code",[s._v("&&")]),s._v("和"),n("code",[s._v("||")]),s._v("，允许更好地控制多个命令之间的继发关系。")]),s._v(" "),n("p",[n("code",[s._v("Command1 && Command2")])]),s._v(" "),n("p",[s._v("上面命令的意思是，如果Command1命令运行成功，则继续运行Command2命令。")]),s._v(" "),n("p",[n("code",[s._v("Command1 || Command2")])]),s._v(" "),n("p",[s._v("上面命令的意思是，如果Command1命令运行失败，则继续运行Command2命令。")]),s._v(" "),n("p",[s._v("下面是一些例子。")]),s._v(" "),n("p",[n("code",[s._v("$ cat filelist.txt ; ls -l filelist.txt")])]),s._v(" "),n("p",[s._v("上面例子中，只要cat命令执行结束，不管成功或失败，都会继续执行ls命令。")]),s._v(" "),n("p",[n("code",[s._v("$ cat filelist.txt && ls -l filelist.txt")]),s._v("\n上面例子中，只有cat命令执行成功，才会继续执行ls命令。如果cat执行失败（比如不存在文件flielist.txt），那么ls命令就不会执行。")]),s._v(" "),n("p",[n("code",[s._v("$ mkdir foo || mkdir bar")])]),s._v(" "),n("p",[s._v("上面例子中，只有mkdir foo命令执行失败（比如foo目录已经存在），才会继续执行mkdir bar命令。如果mkdir foo命令执行成功，就不会创建bar目录了。")]),s._v(" "),n("h2",{attrs:{id:"_6-type-命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-type-命令"}},[s._v("#")]),s._v(" 6. type 命令")]),s._v(" "),n("p",[s._v("Bash 本身内置了很多命令，同时也可以执行外部程序。怎么知道一个命令是内置命令，还是外部程序呢？")]),s._v(" "),n("p",[s._v("type命令用来判断命令的来源。")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" is a shell "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("builtin")]),s._v("\n$ "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" is hashed "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("/bin/ls"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("上面代码中，type命令告诉我们，echo是内部命令，ls是外部程序（/bin/ls）。")]),s._v(" "),n("p",[s._v("type命令本身也是内置命令。")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" is a shell "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("builtin")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("如果要查看一个命令的所有定义，可以使用type命令的-a参数。")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" -a "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" is shell "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("builtin")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" is /usr/bin/echo\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" is /bin/echo\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("上面代码表示，echo命令即是内置命令，也有对应的外部程序。")]),s._v(" "),n("p",[s._v("type命令的-t参数，可以返回一个命令的类型：别名（alias），关键词（keyword），函数（function），内置命令（builtin）和文件（file）。")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("$ "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" -t "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v("\n$ "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" -t "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v("\nkeyword\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("上面例子中，bash是文件，if是关键词。")]),s._v(" "),n("h2",{attrs:{id:"_7-快捷键"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-快捷键"}},[s._v("#")]),s._v(" 7. 快捷键")]),s._v(" "),n("p",[s._v("Bash 提供很多快捷键，可以大大方便操作。下面是一些最常用的快捷键，完整的介绍参见《行操作》一章。")]),s._v(" "),n("ul",[n("li",[s._v("Ctrl + L：清除屏幕并将当前行移到页面顶部。")]),s._v(" "),n("li",[s._v("Ctrl + C：中止当前正在执行的命令。")]),s._v(" "),n("li",[s._v("Shift + PageUp：向上滚动。")]),s._v(" "),n("li",[s._v("Shift + PageDown：向下滚动。")]),s._v(" "),n("li",[s._v("Ctrl + U：从光标位置删除到行首。")]),s._v(" "),n("li",[s._v("Ctrl + K：从光标位置删除到行尾。")]),s._v(" "),n("li",[s._v("Ctrl + D：关闭 Shell 会话。")]),s._v(" "),n("li",[s._v("↑，↓：浏览已执行命令的历史记录。")])]),s._v(" "),n("p",[s._v("除了上面的快捷键，Bash 还具有自动补全功能。命令输入到一半的时候，可以按下 Tab 键，Bash 会自动完成剩下的部分。比如，输入pw，然后按一下 Tab 键，Bash 会自动补上d。")]),s._v(" "),n("p",[s._v("除了命令的自动补全，Bash 还支持路径的自动补全。有时，需要输入很长的路径，这时只需要输入前面的部分，然后按下 Tab 键，就会自动补全后面的部分。\n如果有多个可能的选择，按两次 Tab 键，Bash 会显示所有选项，让你选择。")])])}),[],!1,null,null,null);a.default=e.exports}}]);