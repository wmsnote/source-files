(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{402:function(s,a,e){"use strict";e.r(a);var t=e(9),n=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("Bash 变量分成环境变量和自定义变量两类。")]),s._v(" "),e("h2",{attrs:{id:"_1-简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-简介"}},[s._v("#")]),s._v(" 1. 简介")]),s._v(" "),e("p",[s._v("环境变量是 Bash 环境自带的变量，进入 Shell 时已经定义好了，可以直接使用。它们通常是系统定义好的，也可以由用户从父 Shell 传入子 Shell。")]),s._v(" "),e("p",[s._v("env命令或printenv命令，可以显示所有环境变量。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("env")]),s._v("\n\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("printenv")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("下面是一些常见的环境变量。")]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("ENV")]),s._v(" "),e("th",[s._v("含义")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("BASHPID")]),s._v(" "),e("td",[s._v("Bash 进程的进程 ID。")])]),s._v(" "),e("tr",[e("td",[s._v("BASHOPTS")]),s._v(" "),e("td",[s._v("当前 Shell 的参数，可以用shopt命令修改。")])]),s._v(" "),e("tr",[e("td",[s._v("DISPLAY")]),s._v(" "),e("td",[s._v("图形环境的显示器名字，通常是:0，表示 X Server 的第一个显示器。")])]),s._v(" "),e("tr",[e("td",[s._v("EDITOR")]),s._v(" "),e("td",[s._v("默认的文本编辑器。")])]),s._v(" "),e("tr",[e("td",[s._v("HOME")]),s._v(" "),e("td",[s._v("用户的主目录。")])]),s._v(" "),e("tr",[e("td",[s._v("HOST")]),s._v(" "),e("td",[s._v("当前主机的名称。")])]),s._v(" "),e("tr",[e("td",[s._v("IFS")]),s._v(" "),e("td",[s._v("词与词之间的分隔符，默认为空格。")])]),s._v(" "),e("tr",[e("td",[s._v("LANG")]),s._v(" "),e("td",[s._v("字符集以及语言编码，比如zh_CN.UTF-8。")])]),s._v(" "),e("tr",[e("td",[s._v("PATH")]),s._v(" "),e("td",[s._v("由冒号分开的目录列表，当输入可执行程序名后，会搜索这个目录列表。")])]),s._v(" "),e("tr",[e("td",[s._v("PS1")]),s._v(" "),e("td",[s._v("Shell 提示符。")])]),s._v(" "),e("tr",[e("td",[s._v("PS2：")]),s._v(" "),e("td",[s._v("输入多行命令时，次要的 Shell 提示符。")])]),s._v(" "),e("tr",[e("td",[s._v("PWD")]),s._v(" "),e("td",[s._v("当前工作目录。")])]),s._v(" "),e("tr",[e("td",[s._v("RANDOM")]),s._v(" "),e("td",[s._v("返回一个0到32767之间的随机数。")])]),s._v(" "),e("tr",[e("td",[s._v("SHELL")]),s._v(" "),e("td",[s._v("Shell 的名字。")])]),s._v(" "),e("tr",[e("td",[s._v("SHELLOPTS")]),s._v(" "),e("td",[s._v("启动当前 Shell 的set命令的参数，参见《set 命令》一章。")])]),s._v(" "),e("tr",[e("td",[s._v("TERM")]),s._v(" "),e("td",[s._v("终端类型名，即终端仿真器所用的协议。")])]),s._v(" "),e("tr",[e("td",[s._v("UID")]),s._v(" "),e("td",[s._v("当前用户的 ID 编号。")])]),s._v(" "),e("tr",[e("td",[s._v("USER")]),s._v(" "),e("td",[s._v("当前用户的用户名。")])])])]),s._v(" "),e("p",[s._v("很多环境变量很少发生变化，而且是只读的，可以视为常量。由于它们的变量名全部都是大写，所以传统上，如果用户要自己定义一个常量，也会使用全部大写的变量名")]),s._v(" "),e("p",[s._v("注意，Bash 变量名区分大小写，HOME和home是两个不同的变量。")]),s._v(" "),e("p",[s._v("查看单个环境变量的值，可以使用printenv命令或echo命令。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("printenv")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PATH")]),s._v("\n\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PATH")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("注意，printenv命令后面的变量名，不用加前缀"),e("code",[s._v("$")])])]),s._v(" "),e("p",[s._v("自定义变量是用户在当前 Shell 里面自己定义的变量，必须先定义后使用，而且仅在当前 Shell 可用。一旦退出当前 Shell，该变量就不存在了。")]),s._v(" "),e("p",[s._v("set命令可以显示所有变量（包括环境变量和自定义变量），以及所有的 Bash 函数。")]),s._v(" "),e("p",[e("code",[s._v("$ set")])]),s._v(" "),e("h2",{attrs:{id:"_2-创建变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建变量"}},[s._v("#")]),s._v(" 2. 创建变量")]),s._v(" "),e("p",[s._v("用户创建变量的时候，变量名必须遵守下面的规则。")]),s._v(" "),e("ol",[e("li",[s._v("字母、数字和下划线字符组成。")]),s._v(" "),e("li",[s._v("第一个字符必须是一个字母或一个下划线，不能是数字。")]),s._v(" "),e("li",[s._v("不允许出现空格和标点符号。")])]),s._v(" "),e("p",[s._v("变量声明的语法如下。")]),s._v(" "),e("p",[e("code",[s._v("variable=value")])]),s._v(" "),e("p",[s._v("上面命令中，等号左边是变量名，右边是变量。"),e("strong",[s._v("注意，等号两边不能有空格。")])]),s._v(" "),e("p",[s._v("如果变量的值包含空格，则必须将值放在引号中。")]),s._v(" "),e("p",[e("code",[s._v('myvar="hello world"')])]),s._v(" "),e("p",[s._v("Bash 没有数据类型的概念，所有的变量值都是字符串。")]),s._v(" "),e("p",[s._v("下面是一些自定义变量的例子。")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("a")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("z\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("b")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a string"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("c")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a string and '),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$b")]),s._v('"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("d")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),e("span",{pre:!0,attrs:{class:"token entity",title:"\\t"}},[s._v("\\t")]),e("span",{pre:!0,attrs:{class:"token entity",title:"\\t"}},[s._v("\\t")]),s._v("a string"),e("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("e")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -l foo.txt"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("f")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$((")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("))")])]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("变量可以重复赋值，后面的赋值会覆盖前面的赋值。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("foo")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("foo")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$foo")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("上面例子中，变量foo的第二次赋值会覆盖第一次赋值。")]),s._v(" "),e("h2",{attrs:{id:"_3-读取变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-读取变量"}},[s._v("#")]),s._v(" 3. 读取变量")]),s._v(" "),e("p",[s._v("读取变量的时候，直接在变量名前加上$就可以了。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("foo")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("bar\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$foo")]),s._v("\nbar\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("每当 Shell 看到以"),e("code",[s._v("$")]),s._v("开头的单词时，就会尝试读取这个变量名对应的值。")]),s._v(" "),e("p",[s._v("如果变量不存在，Bash 不会报错，而会输出空字符。")]),s._v(" "),e("p",[s._v("由于$在 Bash 中有特殊含义，把它当作美元符号使用时，一定要非常小心，")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" The total is "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$100")]),s._v(".00\nThe total is 00.00\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("上面命令的原意是输入"),e("code",[s._v("$100")]),s._v("，但是 Bash 将"),e("code",[s._v("$1")]),s._v("解释成了变量，该变量为空，因此输入就变成了"),e("code",[s._v("00.00")]),s._v("。\n所以，如果要使用$的原义，需要在$前面放上反斜杠，进行转义。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" The total is "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$100")]),s._v(".00\nThe total is "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$100")]),s._v(".00\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("读取变量的时候，变量名也可以使用花括号{}包围，比如$a也可以写成${a}。这种写法可以用于变量名与其他字符连用的情况。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("a")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("foo\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a_file")]),s._v("\n\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${a}")]),s._v("_file\nfoo_file\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("上面代码中，变量名a_file不会有任何输出，因为 Bash 将其整个解释为变量，而这个变量是不存在的。只有用花括号区分$a，Bash 才能正确解读。")]),s._v(" "),e("p",[s._v("事实上，读取变量的语法$foo，可以看作是${foo}的简写形式。")]),s._v(" "),e("p",[s._v("如果变量的值本身也是变量，可以使用"),e("code",[s._v("${!varname}")]),s._v("的语法，读取最终的值。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("myvar")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("myvar}")]),s._v("\nruanyf\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("上面的例子中，变量myvar的值是USER，${!myvar}的写法将其展开成最终的值。")]),s._v(" "),e("h2",{attrs:{id:"_4-删除变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-删除变量"}},[s._v("#")]),s._v(" 4. 删除变量")]),s._v(" "),e("p",[s._v("unset命令用来删除一个变量。")]),s._v(" "),e("p",[e("code",[s._v("unset NAME")])]),s._v(" "),e("p",[s._v("这个命令不是很有用。因为不存在的 Bash 变量一律等于空字符串，所以即使unset命令删除了变量，还是可以读取这个变量，值为空字符串。")]),s._v(" "),e("p",[s._v("所以，删除一个变量，也可以将这个变量设成空字符串。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("foo")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("foo")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("上面两种写法，都是删除了变量foo。由于不存在的值默认为空字符串，所以后一种写法可以在等号右边不写任何值。")]),s._v(" "),e("h2",{attrs:{id:"_5-输出变量，export-命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-输出变量，export-命令"}},[s._v("#")]),s._v(" 5. 输出变量，export 命令")]),s._v(" "),e("p",[s._v("用户创建的变量仅可用于当前 Shell，子 Shell 默认读取不到父 Shell 定义的变量。为了把变量传递给子 Shell，需要使用export命令。\n这样输出的变量，对于子 Shell 来说就是环境变量。")]),s._v(" "),e("p",[s._v("export命令用来向子 Shell 输出变量。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("NAME")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("foo\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" NAME\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("上面命令输出了变量NAME。变量的赋值和输出也可以在一个步骤中完成。")]),s._v(" "),e("p",[e("code",[s._v("export NAME=value")])]),s._v(" "),e("p",[s._v("上面命令执行后，当前 Shell 及随后新建的子 Shell，都可以读取变量"),e("code",[s._v("$NAME")]),s._v("。")]),s._v(" "),e("p",[s._v("子 Shell 如果修改继承的变量，不会影响父 Shell。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("foo")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("bar\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$foo")]),s._v("\nbar\n$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("foo")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("baz\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$foo")]),s._v("\nbar\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("上面例子中，子 Shell 修改了继承的变量$foo，对父 Shell 没有影响。")]),s._v(" "),e("h2",{attrs:{id:"_6-特殊变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-特殊变量"}},[s._v("#")]),s._v(" 6. 特殊变量")]),s._v(" "),e("p",[s._v("Bash 提供一些特殊变量。这些变量的值由 Shell 提供，用户不能进行赋值。")]),s._v(" "),e("h3",{attrs:{id:"（1）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（1）"}},[s._v("#")]),s._v(" （1）$?")]),s._v(" "),e("p",[e("code",[s._v("$?")]),s._v("为上一个命令的退出码，用来判断上一个命令是否执行成功。返回值是0，表示上一个命令执行成功；如果是非零，上一个命令执行失败。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" doesnotexist\nls: doesnotexist: No such "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" or directory\n\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("上面例子中，ls命令查看一个不存在的文件，导致报错。$?为1，表示上一个命令执行失败。")]),s._v(" "),e("h3",{attrs:{id:"（2）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（2）"}},[s._v("#")]),s._v(" （2）$")]),s._v(" "),e("p",[e("code",[s._v("$")]),s._v("为当前 Shell 的进程 ID。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" $\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10662")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("blockquote",[e("p",[s._v("这个特殊变量可以用来命名临时文件。")])]),s._v(" "),e("p",[e("code",[s._v("LOGFILE=/tmp/output_log.$")])]),s._v(" "),e("h3",{attrs:{id:"（3）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（3）"}},[s._v("#")]),s._v(" （3）$_")]),s._v(" "),e("p",[e("code",[s._v("$_")]),s._v("为上一个命令的最后一个参数。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" dictionary /usr/share/dict/words\ndictionary\n\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$_")]),s._v("\n/usr/share/dict/words\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h3",{attrs:{id:"（4）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（4）"}},[s._v("#")]),s._v(" （4）$!")]),s._v(" "),e("p",[e("code",[s._v("$!")]),s._v("为最近一个后台执行的异步命令的进程 ID。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ firefox "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("11064")]),s._v("\n\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$!")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("11064")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("上面例子中，firefox是后台运行的命令，"),e("code",[s._v("$!")]),s._v("返回该命令的进程 ID。")]),s._v(" "),e("h3",{attrs:{id:"（5）-0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（5）-0"}},[s._v("#")]),s._v(" （5）$0")]),s._v(" "),e("p",[e("code",[s._v("$0")]),s._v("为当前 Shell 的名称（在命令行直接执行是）或者脚本名（在脚本中执行时）。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$0")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("上面例子中，"),e("code",[s._v("$0")]),s._v("返回当前运行的是 Bash。")]),s._v(" "),e("h3",{attrs:{id:"（6）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（6）"}},[s._v("#")]),s._v(" （6）$-")]),s._v(" "),e("p",[e("code",[s._v("$-")]),s._v("为当前 Shell 的启动参数。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" $-\nhimBHs\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h3",{attrs:{id:"（7）-和"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（7）-和"}},[s._v("#")]),s._v(" （7）"),e("code",[s._v("$@")]),s._v("和"),e("code",[s._v("$#")])]),s._v(" "),e("p",[e("code",[s._v("$@")]),s._v("和"),e("code",[s._v("$#")]),s._v("表示脚本的参数数量，参见脚本一章。")]),s._v(" "),e("h2",{attrs:{id:"_7-变量的默认值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-变量的默认值"}},[s._v("#")]),s._v(" 7. 变量的默认值")]),s._v(" "),e("p",[s._v("Bash 提供四个特殊语法，跟变量的默认值有关，目的是保证变量不为空。")]),s._v(" "),e("h3",{attrs:{id:"varname-word"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#varname-word"}},[s._v("#")]),s._v(" ${varname:-word}")]),s._v(" "),e("p",[s._v("上面语法的含义是，如果变量varname存在且不为空，则返回它的值，否则返回word。它的目的是返回一个默认值，比如${count:-0}表示变量count不存在时返回0。")]),s._v(" "),e("h3",{attrs:{id:"varname-word-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#varname-word-2"}},[s._v("#")]),s._v(" ${varname:=word}")]),s._v(" "),e("p",[s._v("上面语法的含义是，如果变量varname存在且不为空，则返回它的值，否则将它设为word，并且返回word。它的目的是设置变量的默认值，比如${count:=0}表示变量count不存在时返回0，且将count设为0。")]),s._v(" "),e("h3",{attrs:{id:"varname-word-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#varname-word-3"}},[s._v("#")]),s._v(" ${varname:+word}")]),s._v(" "),e("p",[s._v("上面语法的含义是，如果变量名存在且不为空，则返回word，否则返回空值。它的目的是测试变量是否存在，比如${count:+1}表示变量count存在时返回1（表示true），否则返回空值。")]),s._v(" "),e("h3",{attrs:{id:"varname-message"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#varname-message"}},[s._v("#")]),s._v(" ${varname:?message}")]),s._v(" "),e("p",[s._v("上面语法的含义是，如果变量varname存在且不为空，则返回它的值，否则打印出varname: message，并中断脚本的执行。\n如果省略了message，则输出默认的信息“parameter null or not set.”。\n它的目的是防止变量未定义，比如"),e("code",[s._v('${count:?"undefined!"}')]),s._v("表示变量count未定义时就中断执行，抛出错误，返回给定的报错信息undefined!。")]),s._v(" "),e("p",[s._v("上面四种语法如果用在脚本中，变量名的部分可以用到数字1到9，表示脚本的参数。")]),s._v(" "),e("p",[e("code",[s._v('filename=${1:?"filename missing."}')])]),s._v(" "),e("p",[s._v("上面代码出现在脚本中，1表示脚本的第一个参数。如果该参数不存在，就退出脚本并报错。")]),s._v(" "),e("h2",{attrs:{id:"_8-declare-命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-declare-命令"}},[s._v("#")]),s._v(" 8. declare 命令")]),s._v(" "),e("p",[s._v("declare命令可以声明一些特殊类型的变量，为变量设置一些限制，比如声明只读类型的变量和整数类型的变量。")]),s._v(" "),e("p",[s._v("它的语法形式如下。")]),s._v(" "),e("p",[e("code",[s._v("declare OPTION VARIABLE=value")])]),s._v(" "),e("p",[s._v("declare命令的主要参数（OPTION）如下。")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("-a")]),s._v("：声明数组变量。")]),s._v(" "),e("li",[e("code",[s._v("-f")]),s._v("：输出所有函数定义。")]),s._v(" "),e("li",[e("code",[s._v("-F")]),s._v("：输出所有函数名。")]),s._v(" "),e("li",[e("code",[s._v("-i")]),s._v("：声明整数变量。")]),s._v(" "),e("li",[e("code",[s._v("-l")]),s._v("：声明变量为小写字母。")]),s._v(" "),e("li",[e("code",[s._v("-p")]),s._v("：查看变量信息。")]),s._v(" "),e("li",[e("code",[s._v("-r")]),s._v("：声明只读变量。")]),s._v(" "),e("li",[e("code",[s._v("-u")]),s._v("：声明变量为大写字母。")]),s._v(" "),e("li",[e("code",[s._v("-x")]),s._v("：该变量输出为环境变量。")])]),s._v(" "),e("p",[s._v("declare命令如果用在函数中，声明的变量只在函数内部有效，等同于local命令。")]),s._v(" "),e("p",[s._v("不带任何参数时，declare命令输出当前环境的所有变量，包括函数在内，等同于不带有任何参数的set命令。")]),s._v(" "),e("h3",{attrs:{id:"（1）-i参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（1）-i参数"}},[s._v("#")]),s._v(" （1）-i参数")]),s._v(" "),e("p",[s._v("-i参数声明整数变量以后，可以直接进行数学运算。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("declare")]),s._v(" -i "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("val1")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("val2")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("declare")]),s._v(" -i result\n$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("result")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("val1*val2\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$result")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("上面例子中，如果变量result不声明为整数，"),e("code",[s._v("val1*val2")]),s._v("会被当作字面量，不会进行整数运算。\n另外，val1和val2其实不需要声明为整数，因为只要result声明为整数，它的赋值就会自动解释为整数运算。")]),s._v(" "),e("p",[s._v("注意，一个变量声明为整数以后，依然可以被改写为字符串。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("declare")]),s._v(" -i "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("var")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("var")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("foo\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$var")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("上面例子中，变量var声明为整数，覆盖以后，Bash 不会报错，但会赋以不确定的值，上面的例子中可能输出0，也可能输出的是3。")]),s._v(" "),e("h3",{attrs:{id:"（2）-x参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（2）-x参数"}},[s._v("#")]),s._v(" （2）-x参数")]),s._v(" "),e("p",[s._v("-x参数等同于export命令，可以输出一个变量为子 Shell 的环境变量。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("declare")]),s._v(" -x foo\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 等同于")]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" foo\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h3",{attrs:{id:"（3）-r参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（3）-r参数"}},[s._v("#")]),s._v(" （3）-r参数")]),s._v(" "),e("p",[s._v("-r参数可以声明只读变量，无法改变变量值，也不能unset变量。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("declare")]),s._v(" -r "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("bar")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("bar")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\nbash: bar：只读变量\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("unset")]),s._v(" bar\nbash: bar：只读变量\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("上面例子中，后两个赋值语句都会报错，命令执行失败。")]),s._v(" "),e("h3",{attrs:{id:"（4）-u参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（4）-u参数"}},[s._v("#")]),s._v(" （4）-u参数")]),s._v(" "),e("p",[s._v("-u参数声明变量为大写字母，可以自动把变量值转成大写字母。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("declare")]),s._v(" -u foo\n$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("foo")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("upper\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$foo")]),s._v("\nUPPER\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h3",{attrs:{id:"（5）-l参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（5）-l参数"}},[s._v("#")]),s._v(" （5）-l参数")]),s._v(" "),e("p",[s._v("-l参数声明变量为小写字母，可以自动把变量值转成小写字母。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("declare")]),s._v(" -l bar\n$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("bar")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("LOWER\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$bar")]),s._v("\nlower\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h3",{attrs:{id:"（6）-p参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（6）-p参数"}},[s._v("#")]),s._v(" （6）-p参数")]),s._v(" "),e("p",[s._v("-p参数输出变量信息。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("foo")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("hello\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("declare")]),s._v(" -p foo\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("declare")]),s._v(" -- "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("foo")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("declare")]),s._v(" -p bar\nbar：未找到\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("上面例子中，declare -p可以输出已定义变量的值，对于未定义的变量，会提示找不到。")]),s._v(" "),e("p",[s._v("如果不提供变量名，declear -p输出所有变量的信息。")]),s._v(" "),e("p",[e("code",[s._v("$ declare -p")])]),s._v(" "),e("h3",{attrs:{id:"（7）-f参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（7）-f参数"}},[s._v("#")]),s._v(" （7）-f参数")]),s._v(" "),e("p",[s._v("-f参数输出当前环境的所有函数，包括它的定义。")]),s._v(" "),e("p",[e("code",[s._v("$ declare -f")])]),s._v(" "),e("h3",{attrs:{id:"（8）-f参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#（8）-f参数"}},[s._v("#")]),s._v(" （8）-F参数")]),s._v(" "),e("p",[s._v("-F参数输出当前环境的所有函数名，不包含函数定义。")]),s._v(" "),e("p",[e("code",[s._v("$ declare -F")])]),s._v(" "),e("h2",{attrs:{id:"_9-readonly-命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-readonly-命令"}},[s._v("#")]),s._v(" 9. readonly 命令")]),s._v(" "),e("p",[s._v("readonly命令等同于declare -r，用来声明只读变量，不能改变变量值，也不能unset变量。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("readonly")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("foo")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("foo")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\nbash: foo：只读变量\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("上面例子中，更改只读变量foo会报错，命令执行失败。")]),s._v(" "),e("p",[s._v("readonly命令有三个参数。")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("-f")]),s._v("：声明的变量为函数名。")]),s._v(" "),e("li",[e("code",[s._v("-p")]),s._v("：打印出所有的只读变量。")]),s._v(" "),e("li",[e("code",[s._v("-a")]),s._v("：声明的变量为数组。")])]),s._v(" "),e("h2",{attrs:{id:"_10-let-命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-let-命令"}},[s._v("#")]),s._v(" 10. let 命令")]),s._v(" "),e("p",[s._v("let命令声明变量时，可以直接执行算术表达式。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("foo")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("+2\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$foo")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("上面例子中，let命令可以直接计算1 + 2。")]),s._v(" "),e("p",[s._v("let命令的参数表达式如果包含空格，就需要使用引号。")]),s._v(" "),e("p",[e("code",[s._v('$ let "foo = 1 + 2"')])]),s._v(" "),e("p",[s._v("let可以同时对多个变量赋值，赋值表达式之间使用空格分隔。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"v1 = 1"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"v2 = v1++"')]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$v1")]),s._v(","),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$v2")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2,1")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("上面例子中，let声明了两个变量v1和v2，其中v2等于v1++，表示先返回v1的值，然后v1自增。")]),s._v(" "),e("p",[s._v("这种语法支持的运算符，参考《Bash 的算术运算》一章。")])])}),[],!1,null,null,null);a.default=n.exports}}]);