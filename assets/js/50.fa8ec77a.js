(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{414:function(s,e,l){"use strict";l.r(e);var a=l(9),n=Object(a.a)({},(function(){var s=this,e=s.$createElement,l=s._self._c||e;return l("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[l("p",[s._v("Bash 是 Unix 系统和 Linux 系统的一种 Shell（命令行环境），是目前绝大多数 Linux 发行版的默认 Shell。")]),s._v(" "),l("h2",{attrs:{id:"_1-shell-的含义"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_1-shell-的含义"}},[s._v("#")]),s._v(" 1. Shell 的含义")]),s._v(" "),l("p",[s._v("学习 Bash，首先需要理解 Shell 是什么。Shell 这个单词的原意是“外壳”，跟 kernel（内核）相对应，比喻内核外面的一层，即用户跟内核交互的对话界面。")]),s._v(" "),l("p",[s._v("具体来说，Shell 这个词有多种含义。")]),s._v(" "),l("p",[s._v("首先，Shell 是一个程序，提供一个与用户对话的环境。这个环境只有一个命令提示符，让用户从键盘输入命令，所以又称为命令行环境（commandline，简写为 CLI）。Shell 接收到用户输入的命令，将命令送入操作系统执行，并将结果返回给用户。本书中，除非特别指明，Shell 指的就是命令行环境。")]),s._v(" "),l("p",[s._v("其次，Shell 是一个命令解释器，解释用户输入的命令。它支持变量、条件判断、循环操作等语法，所以用户可以用 Shell 命令写出各种小程序，又称为脚本（script）。这些脚本都通过 Shell 的解释执行，而不通过编译。")]),s._v(" "),l("p",[s._v("最后，Shell 是一个工具箱，提供了各种小工具，供用户方便地使用操作系统的功能。")]),s._v(" "),l("h2",{attrs:{id:"_2-shell-的种类"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_2-shell-的种类"}},[s._v("#")]),s._v(" 2. Shell 的种类")]),s._v(" "),l("p",[s._v("Shell 有很多种，只要能给用户提供命令行环境的程序，都可以看作是 Shell。")]),s._v(" "),l("p",[s._v("历史上，主要的 Shell 有下面这些。")]),s._v(" "),l("ol",[l("li",[s._v("Bourne Shell（sh）")]),s._v(" "),l("li",[s._v("Bourne Again shell（bash）")]),s._v(" "),l("li",[s._v("C Shell（csh）")]),s._v(" "),l("li",[s._v("TENEX C Shell（tcsh）")]),s._v(" "),l("li",[s._v("Korn shell（ksh）")]),s._v(" "),l("li",[s._v("Z Shell（zsh）")]),s._v(" "),l("li",[s._v("Friendly Interactive Shell（fish）")])]),s._v(" "),l("p",[s._v("Bash 是目前最常用的 Shell，除非特别指明，下文的 Shell 和 Bash 当作同义词使用，可以互换。")]),s._v(" "),l("p",[s._v("下面的命令可以查看当前运行的 Shell。")]),s._v(" "),l("div",{staticClass:"language-bash line-numbers-mode"},[l("pre",{pre:!0,attrs:{class:"language-bash"}},[l("code",[s._v("$ "),l("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),l("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$SHELL")]),s._v("\n/bin/bash\n")])]),s._v(" "),l("div",{staticClass:"line-numbers-wrapper"},[l("span",{staticClass:"line-number"},[s._v("1")]),l("br"),l("span",{staticClass:"line-number"},[s._v("2")]),l("br")])]),l("p",[s._v("下面的命令可以查看当前的 Linux 系统安装的所有 Shell。")]),s._v(" "),l("p",[l("code",[s._v("$ cat /etc/shells")])]),s._v(" "),l("p",[s._v("上面两个命令中，$是命令行环境的提示符，用户只需要输入提示符后面的内容。")]),s._v(" "),l("p",[s._v("Linux 允许每个用户使用不同的 Shell，用户的默认 Shell 一般都是 Bash，或者与 Bash 兼容。")]),s._v(" "),l("h2",{attrs:{id:"_3-命令行环境"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_3-命令行环境"}},[s._v("#")]),s._v(" 3. 命令行环境")]),s._v(" "),l("p",[s._v("终端模拟器 #\n如果是不带有图形环境的 Linux 系统（比如专用于服务器的系统），启动后就直接是命令行环境。")]),s._v(" "),l("p",[s._v("不过，现在大部分的 Linux 发行版，尤其是针对普通用户的发行版，都是图形环境。用户登录系统后，自动进入图形环境，需要自己启动终端模拟器，才能进入命令行环境。")]),s._v(" "),l("p",[s._v("所谓“终端模拟器”（terminal emulator）就是一个模拟命令行窗口的程序，让用户在一个窗口中使用命令行环境，并且提供各种附加功能，比如调整颜色、字体大小、行距等等。")]),s._v(" "),l("p",[s._v("不同 Linux 发行版（准确地说是不同的桌面环境）带有的终端程序是不一样的，比如 KDE 桌面环境的终端程序是 konsole，Gnome 桌面环境的终端程序是 gnome-terminal，用户也可以安装第三方的终端程序。所有终端程序，尽管名字不同，基本功能都是一样的，就是让用户可以进入命令行环境，使用 Shell。")]),s._v(" "),l("h2",{attrs:{id:"_4-命令行提示符"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_4-命令行提示符"}},[s._v("#")]),s._v(" 4. 命令行提示符")]),s._v(" "),l("p",[s._v("进入命令行环境以后，用户会看到 Shell 的提示符。提示符往往是一串前缀，最后以一个美元符号$结尾，用户可以在这个符号后面输入各种命令。")]),s._v(" "),l("p",[l("code",[s._v("[user@hostname] $")]),s._v("上面例子中，完整的提示符是"),l("code",[s._v("[user@hostname]")])]),s._v(" "),l("p",[s._v("$，其中前缀是用户名（user）加上@，再加主机名（hostname）。比如，用户名是bill，主机名是home-machine，前缀就是bill@home-machine。")]),s._v(" "),l("p",[s._v("注意，根用户（root）的提示符，不以美元符号（$）结尾，而以井号（#）结尾，用来提醒用户，现在具有根权限，可以执行各种操作，务必小心，不要出现误操作。这个符号是可以自己定义的，详见《命令提示符》一章。")]),s._v(" "),l("p",[s._v("为了简洁，后文的命令行提示符都只使用$表示。")]),s._v(" "),l("h2",{attrs:{id:"_5-进入和退出方法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_5-进入和退出方法"}},[s._v("#")]),s._v(" 5. 进入和退出方法")]),s._v(" "),l("p",[s._v("进入命令行环境以后，一般就已经打开 Bash 了。如果你的 Shell 不是 Bash，可以输入bash命令启动 Bash。")]),s._v(" "),l("p",[l("code",[s._v("$ bash")]),s._v("\n退出 Bash 环境，可以使用exit命令，也可以同时按下Ctrl + d。")]),s._v(" "),l("p",[l("code",[s._v("$ exit")]),s._v("\nBash 的基本用法就是在命令行输入各种命令，非常直观。作为练习，可以试着输入pwd命令。按下回车键，就会显示当前所在的目录。")]),s._v(" "),l("p",[l("code",[s._v("$ pwd")]),s._v("\n/home/me")]),s._v(" "),l("p",[s._v("如果不小心输入了pwe，会返回一个提示，表示输入出错，没有对应的可执行程序。")]),s._v(" "),l("p",[l("code",[s._v("$ pwe")]),s._v("\nbash: pwe：未找到命令")]),s._v(" "),l("h2",{attrs:{id:"_6-shell-和-bash-的历史"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_6-shell-和-bash-的历史"}},[s._v("#")]),s._v(" 6. Shell 和 Bash 的历史")]),s._v(" "),l("p",[s._v("Shell 伴随着 Unix 系统的诞生而诞生。")]),s._v(" "),l("p",[s._v("1969年，Ken Thompson 和 Dennis Ritchie 开发了第一版的 Unix。")]),s._v(" "),l("p",[s._v("1971年，Ken Thompson 编写了最初的 Shell，称为 Thompson shell，程序名是sh，方便用户使用 Unix。")]),s._v(" "),l("p",[s._v("1973年至1975年间，John R. Mashey 扩展了最初的 Thompson shell，添加了编程功能，使得 Shell 成为一种编程语言。这个版本的 Shell 称为 Mashey shell。")]),s._v(" "),l("p",[s._v("1976年，Stephen Bourne 结合 Mashey shell 的功能，重写一个新的 Shell，称为 Bourne shell。")]),s._v(" "),l("p",[s._v("1978年，加州大学伯克利分校的 Bill Joy 开发了 C shell，为 Shell 提供 C 语言的语法，程序名是csh。它是第一个真正替代sh的 UNIX shell，被合并到 Berkeley UNIX 的 2BSD 版本中。")]),s._v(" "),l("p",[s._v("1979年，UNIX 第七版发布，内置了 Bourne Shell，导致它成为 Unix 的默认 Shell。注意，Thompson shell、Mashey shell 和 Bourne shell 都是贝尔实验室的产品，程序名都是sh。对于用户来说，它们是同一个东西，只是底层代码不同而已。")]),s._v(" "),l("p",[s._v("1983年，David Korn 开发了Korn shell，程序名是ksh。")]),s._v(" "),l("p",[s._v("1985年，Richard Stallman 成立了自由软件基金会（FSF），由于 Shell 的版权属于贝尔公司，所以他决定写一个自由版权的、使用 GNU 许可证的 Shell 程序，避免 Unix 的版权争议。")]),s._v(" "),l("p",[s._v("1988年，自由软件基金会的第一个付薪程序员 Brian Fox 写了一个 Shell，功能基本上是 Bourne shell 的克隆，叫做 Bourne-Again SHell，简称 Bash，程序名为bash，任何人都可以免费使用。后来，它逐渐成为 Linux 系统的标准 Shell。")]),s._v(" "),l("p",[s._v("1989年，Bash 发布1.0版。")]),s._v(" "),l("p",[s._v("1996年，Bash 发布2.0版。")]),s._v(" "),l("p",[s._v("2004年，Bash 发布3.0版。")]),s._v(" "),l("p",[s._v("2009年，Bash 发布4.0版。")]),s._v(" "),l("p",[s._v("2019年，Bash 发布5.0版。")]),s._v(" "),l("p",[s._v("用户可以通过bash命令的--version参数或者环境变量$BASH_VERSION，查看本机的 Bash 版本。")]),s._v(" "),l("div",{staticClass:"language-bash line-numbers-mode"},[l("pre",{pre:!0,attrs:{class:"language-bash"}},[l("code",[s._v("$ "),l("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v(" --version\nGNU bash，版本 "),l("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.0")]),s._v(".3"),l("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),l("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),l("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("-release "),l("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x86_64-pc-linux-gnu"),l("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n\n$ "),l("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),l("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$BASH_VERSION")]),s._v("\n"),l("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.0")]),s._v(".3"),l("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),l("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),l("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("-release\n")])]),s._v(" "),l("div",{staticClass:"line-numbers-wrapper"},[l("span",{staticClass:"line-number"},[s._v("1")]),l("br"),l("span",{staticClass:"line-number"},[s._v("2")]),l("br"),l("span",{staticClass:"line-number"},[s._v("3")]),l("br"),l("span",{staticClass:"line-number"},[s._v("4")]),l("br"),l("span",{staticClass:"line-number"},[s._v("5")]),l("br"),l("span",{staticClass:"line-number"},[s._v("6")]),l("br")])])])}),[],!1,null,null,null);e.default=n.exports}}]);