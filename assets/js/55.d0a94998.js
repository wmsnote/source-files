(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{381:function(s,a,t){"use strict";t.r(a);var n=t(9),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"_1-session"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-session"}},[s._v("#")]),s._v(" 1. Session")]),s._v(" "),t("p",[s._v("用户每次使用 Shell，都会开启一个与 Shell 的 Session（对话）。")]),s._v(" "),t("p",[s._v("Session 有两种类型：登录 Session 和非登录 Session，也可以叫做 login shell 和 non-login shell。")]),s._v(" "),t("h2",{attrs:{id:"_2-登录-session"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-登录-session"}},[s._v("#")]),s._v(" 2. 登录 Session")]),s._v(" "),t("p",[s._v("登录 Session 是用户登录系统以后，系统为用户开启的原始 Session，通常需要用户输入用户名和密码进行登录。")]),s._v(" "),t("p",[s._v("登录 Session 一般进行整个系统环境的初始化，启动的初始化脚本依次如下。")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("脚本")]),s._v(" "),t("th",[s._v("含义")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("/etc/profile")]),s._v(" "),t("td",[s._v("所有用户的全局配置脚本。")])]),s._v(" "),t("tr",[t("td",[s._v("/etc/profile.d")]),s._v(" "),t("td",[s._v("目录里面所有.sh文件")])]),s._v(" "),t("tr",[t("td",[s._v("~/.bash_profile")]),s._v(" "),t("td",[s._v("用户的个人配置脚本。如果该脚本存在，则执行完就不再往下执行。")])]),s._v(" "),t("tr",[t("td",[s._v("~/.bash_login")]),s._v(" "),t("td",[s._v("如果~/.bash_profile没找到，则尝试执行这个脚本（C shell 的初始化脚本）。如果该脚本存在，则执行完就不再往下执行。")])]),s._v(" "),t("tr",[t("td",[s._v("~/.profile")]),s._v(" "),t("td",[s._v("如果~/.bash_profile和~/.bash_login都没找到，则尝试读取这个脚本（Bourne shell 和 Korn shell 的初始化脚本）。")])])])]),s._v(" "),t("blockquote",[t("p",[s._v("Linux 发行版更新的时候，会更新/etc里面的文件，比如/etc/profile，因此不要直接修改这个文件。如果想修改所有用户的登陆环境，就在/etc/profile.d目录里面新建.sh脚本。")])]),s._v(" "),t("p",[s._v("如果想修改你个人的登录环境，一般是写在"),t("code",[s._v("~/.bash_profile")]),s._v("里面。下面是一个典型的.bash_profile文件。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PATH")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PATH")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PATH")]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$HOME")]),s._v("/bin\n\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("SHELL")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/bin/bash\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MANPATH")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/usr/man:/usr/X11/man\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("EDITOR")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/usr/bin/vi\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PS1")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\h:\\w\\$ '")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PS2")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'> '")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" -f ~/.bashrc "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" ~/.bashrc\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PATH")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" EDITOR\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("可以看到，这个脚本定义了一些最基本的环境变量，然后执行了"),t("code",[s._v("~/.bashrc")]),s._v("。")]),s._v(" "),t("p",[s._v("bash命令的--login参数，会强制执行登录 Session 会执行的脚本。"),t("code",[s._v("$ bash --login")])]),s._v(" "),t("p",[s._v("bash命令的--noprofile参数，会跳过上面这些 Profile 脚本。 "),t("code",[s._v("$ bash --noprofile")])]),s._v(" "),t("h2",{attrs:{id:"_3-非登录-session"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-非登录-session"}},[s._v("#")]),s._v(" 3. 非登录 Session")]),s._v(" "),t("p",[s._v("非登录 Session 是用户进入系统以后，手动新建的 Session，这时不会进行环境初始化。比如，在命令行执行bash命令，就会新建一个非登录 Session。")]),s._v(" "),t("p",[s._v("非登录 Session 的初始化脚本依次如下。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("/etc/bash.bashrc")]),s._v("：对全体用户有效。")]),s._v(" "),t("li",[t("code",[s._v("~/.bashrc")]),s._v("：仅对当前用户有效。")])]),s._v(" "),t("blockquote",[t("p",[s._v("对用户来说，"),t("code",[s._v("~/.bashrc")]),s._v("通常是最重要的脚本。非登录 Session 默认会执行它，而登陆 Session 一般也会通过调用执行它。由于每次执行 Bash 脚本，都会新建一个非登录 Session，所以"),t("code",[s._v("~/.bashrc")]),s._v("也是每次执行脚本都会执行的。")])]),s._v(" "),t("p",[s._v("bash命令的--norc参数，可以禁止在非登录 Session 执行"),t("code",[s._v("~/.bashrc")]),s._v("脚本。"),t("code",[s._v("$ bash --norc")]),s._v("\nbash命令的--rcfile参数，指定另一个脚本代替.bashrc。"),t("code",[s._v("$ bash --rcfile testrc")])]),s._v(" "),t("h2",{attrs:{id:"_4-bash-logout"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-bash-logout"}},[s._v("#")]),s._v(" 4. .bash_logout")]),s._v(" "),t("p",[t("code",[s._v("~/.bash_logout")]),s._v("脚本在每次退出 Session 时执行，通常用来做一些清理工作和记录工作，比如删除临时文件，记录用户在本次 Session 花费的时间。")]),s._v(" "),t("p",[s._v("如果没有退出时要执行的命令，这个文件也可以不存在。")]),s._v(" "),t("h2",{attrs:{id:"_5-启动选项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-启动选项"}},[s._v("#")]),s._v(" 5. 启动选项")]),s._v(" "),t("p",[s._v("为了方便 Debug，有时在启动 Bash 的时候，可以加上启动参数。")]),s._v(" "),t("p",[s._v("-n：不运行脚本，只检查是否有语法错误。\n-v：输出每一行语句运行结果前，会先输出该行语句。\n-x：每一个命令处理完以后，先输出该命令，再进行下一个命令的处理。\n$ bash -n scriptname\n$ bash -v scriptname\n$ bash -x scriptname")]),s._v(" "),t("h2",{attrs:{id:"_6-键盘绑定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-键盘绑定"}},[s._v("#")]),s._v(" 6. 键盘绑定")]),s._v(" "),t("p",[s._v("Bash 允许用户定义自己的快捷键。全局的键盘绑定文件默认为/etc/inputrc，你可以在主目录创建自己的键盘绑定文件.inputrc文件。如果定义了这个文件，需要在其中加入下面这行，保证全局绑定不会被遗漏。")]),s._v(" "),t("p",[t("code",[s._v("$include /etc/inputrc")]),s._v(" "),t("code",[s._v(".inputrc")]),s._v('文件里面的快捷键，可以像这样定义，"\\C-t":"pwd\\n"表示将Ctrl + t绑定为运行pwd命令。')])])}),[],!1,null,null,null);a.default=e.exports}}]);