(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{341:function(s,n,e){"use strict";e.r(n);var t=e(9),a=Object(t.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("性能测试工具，如 Apache ab, Apache JMeter (互联网公司用的较多)，LoadRunner 等。")]),s._v(" "),e("p",[s._v("我们今天主要说一说轻量级性能测试工具 wrk。")]),s._v(" "),e("p",[s._v("wrk是一个http的压测工具,底层封装了epoll(linux)和kqueue(bsd),所以性能特别好")]),s._v(" "),e("p",[s._v("再来说说 wrk 的优势：")]),s._v(" "),e("ol",[e("li",[s._v("轻量级性能测试工具;")]),s._v(" "),e("li",[s._v("安装简单（相对 Apache ab 来说）;")]),s._v(" "),e("li",[s._v("学习曲线基本为零，几分钟就能学会咋用了；")]),s._v(" "),e("li",[s._v("基于系统自带的高性能 I/O 机制，如 epoll, kqueue, 利用异步的事件驱动框架，通过很少的线程就可以压出很大的并发量；")])]),s._v(" "),e("p",[s._v("劣势")]),s._v(" "),e("p",[s._v("wrk 目前仅支持单机压测，后续也不太可能支持多机器对目标机压测，因为它本身的定位，并不是用来取代 JMeter, LoadRunner 等专业的测试工具，wrk 提供的功能，对我们后端开发人员来说，应付日常接口性能验证还是比较友好的。")]),s._v(" "),e("p",[s._v("安装")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone https://github.com/wg/wrk.git\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" wrk\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将可执行文件移动到 /usr/local/bin 位置")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" wrk /usr/local/bin\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h2",{attrs:{id:"basic-usage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#basic-usage"}},[s._v("#")]),s._v(" Basic Usage")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[s._v("wrk -t12 -c400 -d30s http://127.0.0.1:8080/index.html\n")])])]),e("p",[s._v("This runs a benchmark for 30 seconds, using 12 threads, and keeping\n400 HTTP connections open.")]),s._v(" "),e("p",[s._v("Output:")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[s._v("Running 30s test @ http://127.0.0.1:8080/index.html\n  12 threads and 400 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency   635.91us    0.89ms  12.92ms   93.69%\n    Req/Sec    56.20k     8.07k   62.00k    86.54%\n  22464657 requests in 30.00s, 17.76GB read\nRequests/sec: 748868.53\nTransfer/sec:    606.33MB\n")])])]),e("h2",{attrs:{id:"command-line-options"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#command-line-options"}},[s._v("#")]),s._v(" Command Line Options")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[s._v('-c, --connections: total number of HTTP connections to keep open with\n                   each thread handling N = connections/threads\n\n-d, --duration:    duration of the test, e.g. 2s, 2m, 2h\n\n-t, --threads:     total number of threads to use\n\n-s, --script:      LuaJIT script, see SCRIPTING\n\n-H, --header:      HTTP header to add to request, e.g. "User-Agent: wrk"\n\n    --latency:     print detailed latency statistics\n\n    --timeout:     record a timeout if a response is not received within\n                   this amount of time.\n')])])]),e("p",[s._v("解释一下每个指标代表什么意思?")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Running 30s test @ http://www.baidu.com （压测时间30s）\n  12 threads and 400 connections （共12个测试线程，400个连接）\n              （平均值） （标准差）  （最大值）（正负一个标准差所占比例）\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    （延迟）\n    Latency   386.32ms  380.75ms   2.00s    86.66%\n    (每秒请求数)\n    Req/Sec    17.06     13.91   252.00     87.89%\n  Latency Distribution （延迟分布）\n     50%  218.31ms\n     75%  520.60ms\n     90%  955.08ms\n     99%    1.93s\n  4922 requests in 30.06s, 73.86MB read (30.06s内处理了4922个请求，耗费流量73.86MB)\n  Socket errors: connect 0, read 0, write 0, timeout 311 (发生错误数)\nRequests/sec:    163.76 (QPS 163.76,即平均每秒处理请求数为163.76)\nTransfer/sec:      2.46MB (平均每秒流量2.46MB)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[e("img",{attrs:{src:"img/wrk.png",alt:"Image Title"}})])])}),[],!1,null,null,null);n.default=a.exports}}]);