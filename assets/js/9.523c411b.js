(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{337:function(s,a,n){"use strict";n.r(a);var e=n(9),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("如何编写最佳的Dockerfile")]),s._v(" "),n("p",[s._v("我已经使用 Docker 有一段时间了，其中编写 Dockerfile 是非常重要的一部分工作。在这篇博客中，我打算分享一些建议，帮助大家编写更好的 Dockerfile。")]),s._v(" "),n("h2",{attrs:{id:"目标"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#目标"}},[s._v("#")]),s._v(" 目标:")]),s._v(" "),n("ol",[n("li",[s._v("更快的构建速度")]),s._v(" "),n("li",[s._v("更小的 Docker 镜像大小")]),s._v(" "),n("li",[s._v("更少的 Docker 镜像层")]),s._v(" "),n("li",[s._v("充分利用镜像缓存")]),s._v(" "),n("li",[s._v("增加 Dockerfile 可读性")]),s._v(" "),n("li",[s._v("让 Docker 容器使用起来更简单")])]),s._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),n("ol",[n("li",[s._v("编写 .dockerignore 文件")]),s._v(" "),n("li",[s._v("容器只运行单个应用")]),s._v(" "),n("li",[s._v("将多个 RUN 指令合并为一个")]),s._v(" "),n("li",[s._v("基础镜像的标签不要用 latest")]),s._v(" "),n("li",[s._v("每个 RUN 指令后删除多余文件")]),s._v(" "),n("li",[s._v("选择合适的基础镜像 (alpine 版本最好)")]),s._v(" "),n("li",[s._v("设置 WORKDIR 和 CMD")]),s._v(" "),n("li",[s._v("使用 ENTRYPOINT (可选)")]),s._v(" "),n("li",[s._v("在 entrypoint 脚本中使用 exec")]),s._v(" "),n("li",[s._v("COPY 与 ADD 优先使用前者")]),s._v(" "),n("li",[s._v("合理调整 COPY 与 RUN 的顺序")]),s._v(" "),n("li",[s._v("设置默认的环境变量，映射端口和数据卷")]),s._v(" "),n("li",[s._v("使用 LABEL 设置镜像元数据")]),s._v(" "),n("li",[s._v("添加 HEALTHCHECK")])]),s._v(" "),n("h2",{attrs:{id:"示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[s._v("#")]),s._v(" 示例")]),s._v(" "),n("p",[s._v("示例 Dockerfile 犯了几乎所有的错 (当然我是故意的)。接下来，我会一步步优化它。假设我们需要使用 Docker 运行一个 Node.js 应用，下面就是它的 Dockerfile(CMD 指令太复杂了，所以我简化了，它是错误的，仅供参考)。")]),s._v(" "),n("div",{staticClass:"language-dockerfile line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" ubuntu\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" . /app\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get update\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get upgrade "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("y\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get install "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("y nodejs ssh mysql\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" cd /app && npm install\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# this should start three processes, mysql and ssh")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# in the background and node app in foreground")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# isn't it beautifully terrible? <3")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" mysql & sshd & npm start\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("构建镜像:")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("docker build -t wtf "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"_1-编写-dockerignore-文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-编写-dockerignore-文件"}},[s._v("#")]),s._v(" 1. 编写 .dockerignore 文件")]),s._v(" "),n("p",[s._v("构建镜像时，Docker 需要先准备context，将所有需要的文件收集到进程中。默认的context包含 Dockerfile 目录中的所有文件，但是实际上，我们并不需要"),n("code",[s._v(".git")]),s._v(" 目录，"),n("code",[s._v("node_modules")]),s._v(" 目录等内容。 "),n("code",[s._v(".dockerignore")]),s._v(" 的作用和语法类似于 "),n("code",[s._v(".gitignore")]),s._v("，可以忽略一些不需要的文件，这样可以有效加快镜像构建时间，同时减少 Docker 镜像的大小。")]),s._v(" "),n("p",[s._v("示例如下:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(".git/\nnode_modules/\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"_2-容器只运行单个应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-容器只运行单个应用"}},[s._v("#")]),s._v(" 2. 容器只运行单个应用")]),s._v(" "),n("p",[s._v("从技术角度讲，你可以在 Docker 容器中运行多个进程。你可以将数据库，前端，后端，ssh，supervisor 都运行在同一个 Docker 容器中。但是，这会让你非常痛苦:")]),s._v(" "),n("ul",[n("li",[s._v("非常长的构建时间 (修改前端之后，整个后端也需要重新构建)")]),s._v(" "),n("li",[s._v("非常大的镜像大小")]),s._v(" "),n("li",[s._v("多个应用的日志难以处理 (不能直接使用 stdout，否则多个应用的日志会混合到一起)")]),s._v(" "),n("li",[s._v("横向扩展时非常浪费资源 (不同的应用需要运行的容器数并不相同)")]),s._v(" "),n("li",[s._v("僵尸进程问题 - 你需要选择合适的 init 进程")])]),s._v(" "),n("p",[s._v("因此，我建议大家为每个应用构建单独的 Docker 镜像，然后使用 Docker Compose 运行多个 Docker 容器。")]),s._v(" "),n("p",[s._v("现在，我从 Dockerfile 中删除一些不需要的安装包，另外，SSH 可以用 docker exec 替代。示例如下：")]),s._v(" "),n("div",{staticClass:"language-dockerfile line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" ubuntu\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" . /app\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get update\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get upgrade "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("y\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# we should remove ssh and mysql, and use")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# separate container for database")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get install "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("y nodejs  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ssh mysql")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" cd /app && npm install\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" npm start\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h3",{attrs:{id:"_3-将多个-run-指令合并为一个"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-将多个-run-指令合并为一个"}},[s._v("#")]),s._v(" 3. 将多个 RUN 指令合并为一个")]),s._v(" "),n("p",[s._v("Docker 镜像是分层的，下面这些知识点非常重要:")]),s._v(" "),n("ul",[n("li",[s._v("Dockerfile 中的每个指令都会创建一个新的镜像层")]),s._v(" "),n("li",[s._v("镜像层将被缓存和复用")]),s._v(" "),n("li",[s._v("当 Dockerfile 的指令修改了，复制的文件变化了，或者构建镜像时指定的变量不同了，对应的镜像层缓存就会失效")]),s._v(" "),n("li",[s._v("某一层的镜像缓存失效之后，它之后的镜像层缓存都会失效")]),s._v(" "),n("li",[s._v("镜像层是不可变的，如果我们再某一层中添加一个文件，然后在下一层中删除它，则镜像中依然会包含该文件 (只是这个文件在 Docker 容器中不可见了)。")])]),s._v(" "),n("p",[s._v("Docker 镜像类似于洋葱。它们都有很多层。为了修改内层，则需要将外面的层都删掉。记住这一点的话，其他内容就很好理解了。")]),s._v(" "),n("p",[s._v("现在，我们将所有的 RUN 指令合并为一个。同时把apt-get upgrade删除，因为它会使得镜像构建非常不确定 (我们只需要依赖基础镜像的更新就好了)")]),s._v(" "),n("div",{staticClass:"language-dockerfile line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" ubuntu\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" . /app\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get update \\\n    && apt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get install "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("y nodejs \\\n    && cd /app \\\n    && npm install\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" npm start\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("记住一点，我们只能将变化频率一样的指令合并在一起。将 node.js 安装与 npm 模块安装放在一起的话，则每次修改源代码，都需要重新安装 node.js，这显然不合适。因此，正确的写法是这样的:")]),s._v(" "),n("div",{staticClass:"language-dockerfile line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" ubuntu\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get update && apt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get install "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("y nodejs\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" . /app\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" cd /app && npm install\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" npm start\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"_4-基础镜像的标签不要用-latest"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-基础镜像的标签不要用-latest"}},[s._v("#")]),s._v(" 4. 基础镜像的标签不要用 latest")]),s._v(" "),n("p",[s._v("当镜像没有指定标签时，将默认使用latest 标签。因此， FROM ubuntu 指令等同于FROM ubuntu:latest。当时，当镜像更新时，latest 标签会指向不同的镜像，这时构建镜像有可能失败。如果你的确需要使用最新版的基础镜像，可以使用 latest 标签，否则的话，最好指定确定的镜像标签。")]),s._v(" "),n("p",[s._v("示例 Dockerfile 应该使用16.04作为标签。")]),s._v(" "),n("div",{staticClass:"language-dockerfile line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" ubuntu"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("16.04  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# it's that easy!")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get update && apt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get install "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("y nodejs\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" . /app\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" cd /app && npm install\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" npm start\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"_5-每个-run-指令后删除多余文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-每个-run-指令后删除多余文件"}},[s._v("#")]),s._v(" 5. 每个 RUN 指令后删除多余文件")]),s._v(" "),n("p",[s._v("假设我们更新了 apt-get 源，下载，解压并安装了一些软件包，它们都保存在/var/lib/apt/lists/目录中。但是，运行应用时 Docker 镜像中并不需要这些文件。我们最好将它们删除，因为它会使 Docker 镜像变大。")]),s._v(" "),n("p",[s._v("示例 Dockerfile 中，我们可以删除/var/lib/apt/lists/目录中的文件 (它们是由 apt-get update 生成的)。")]),s._v(" "),n("div",{staticClass:"language-dockerfile line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" ubuntu"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("16.04\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get update \\\n    && apt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get install "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("y nodejs \\\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# added lines")]),s._v("\n    && rm "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("rf /var/lib/apt/lists/*\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" . /app\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" cd /app && npm install\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" npm start\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h3",{attrs:{id:"_6-选择合适的基础镜像-alpine-版本最好"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-选择合适的基础镜像-alpine-版本最好"}},[s._v("#")]),s._v(" 6. 选择合适的基础镜像 (alpine 版本最好)")]),s._v(" "),n("p",[s._v("在示例中，我们选择了ubuntu作为基础镜像。但是我们只需要运行 node 程序，有必要使用一个通用的基础镜像吗？node镜像应该是更好的选择。")]),s._v(" "),n("div",{staticClass:"language-dockerfile line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" node\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" . /app\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# we don't need to install node")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# anymore and use apt-get")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" cd /app && npm install\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" npm start\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("更好的选择是 alpine 版本的node镜像。alpine 是一个极小化的 Linux 发行版，只有 4MB，这让它非常适合作为基础镜像。")]),s._v(" "),n("div",{staticClass:"language-dockerfile line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("7"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("alpine\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" . /app\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" cd /app && npm install\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" npm start\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("apk 是 Alpine 的包管理工具。它与apt-get有些不同，但是非常容易上手。另外，它还有一些非常有用的特性，比如no-cache和 --virtual选项，它们都可以帮助我们减少镜像的大小。")]),s._v(" "),n("h3",{attrs:{id:"_7-设置-workdir-和-cmd"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-设置-workdir-和-cmd"}},[s._v("#")]),s._v(" 7. 设置 WORKDIR 和 CMD")]),s._v(" "),n("p",[s._v("WORKDIR 指令可以设置默认目录，也就是运行RUN / CMD / ENTRYPOINT指令的地方。")]),s._v(" "),n("p",[s._v("CMD 指令可以设置容器创建是执行的默认命令。另外，你应该讲命令写在一个数组中，数组中每个元素为命令的每个单词 (参考官方文档)。")]),s._v(" "),n("div",{staticClass:"language-dockerfile line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("7"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("alpine\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /app\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" . /app\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" npm install\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"npm"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"start"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"_8-使用-entrypoint-可选"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-使用-entrypoint-可选"}},[s._v("#")]),s._v(" 8. 使用 ENTRYPOINT (可选)")]),s._v(" "),n("p",[s._v("ENTRYPOINT 指令并不是必须的，因为它会增加复杂度。ENTRYPOINT是一个脚本，它会默认执行，并且将指定的命令错误其参数。它通常用于构建可执行的 Docker 镜像。entrypoint.sh 如下:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('#!/usr/bin/env sh\n# $0 is a script name,\n# $1, $2, $3 etc are passed arguments\n# $1 is our command\nCMD=$1\ncase "$CMD" in\n  "dev" )\n    npm install\n    export NODE_ENV=development\n    exec npm run dev\n    ;;\n\n  "start" )\n    # we can modify files here, using ENV variables passed in\n    # "docker create" command. It can\'t be done during build process.\n    echo "db: $DATABASE_ADDRESS" >> /app/config.yml\n    export NODE_ENV=production\n    exec npm start\n    ;;\n\n   * )\n    # Run custom command. Thanks to this line we can still use\n    # "docker run our_image /bin/bash" and it will work\n    exec $CMD ${@:2}\n    ;;\nesac\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("p",[s._v("示例 Dockerfile:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('FROM node:7-alpine\nWORKDIR /app\nADD . /app\nRUN npm install\n\nENTRYPOINT ["./entrypoint.sh"]\nCMD ["start"]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("可以使用如下命令运行该镜像:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 运行开发版本\ndocker run our-app dev\n# 运行生产版本\ndocker run our-app start\n\n# 运行bash\ndocker run -it our-app /bin/bash\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"_9-在-entrypoint-脚本中使用-exec"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-在-entrypoint-脚本中使用-exec"}},[s._v("#")]),s._v(" 9. 在 entrypoint 脚本中使用 exec")]),s._v(" "),n("p",[s._v("在前文的 entrypoint 脚本中，我使用了exec命令运行 node 应用。不使用exec的话，我们则不能顺利地关闭容器，因为 SIGTERM 信号会被 bash 脚本进程吞没。exec命令启动的进程可以取代脚本进程，因此所有的信号都会正常工作。")]),s._v(" "),n("ol",{attrs:{start:"10"}},[n("li",[s._v("COPY 与 ADD 优先使用前者\nCOPY 指令非常简单，仅用于将文件拷贝到镜像中。ADD 相对来讲复杂一些，可以用于下载远程文件以及解压压缩包 (参考官方文档)。")])]),s._v(" "),n("p",[s._v("FROM node:7-alpine\nWORKDIR /app")]),s._v(" "),n("p",[s._v("COPY . /app\nRUN npm install")]),s._v(" "),n("p",[s._v('ENTRYPOINT ["./entrypoint.sh"]\nCMD ["start"]')]),s._v(" "),n("h3",{attrs:{id:"_11-合理调整-copy-与-run-的顺序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-合理调整-copy-与-run-的顺序"}},[s._v("#")]),s._v(" 11. 合理调整 COPY 与 RUN 的顺序")]),s._v(" "),n("p",[s._v("我们应该把变化最少的部分放在 Dockerfile 的前面，这样可以充分利用镜像缓存。")]),s._v(" "),n("p",[s._v("示例中，源代码会经常变化，则每次构建镜像时都需要重新安装 NPM 模块，这显然不是我们希望看到的。因此我们可以先拷贝package.json，然后安装 NPM 模块，最后才拷贝其余的源代码。这样的话，即使源代码变化，也不需要重新安装 NPM 模块。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('FROM node:7-alpine\nWORKDIR /app\n\nCOPY package.json /app\nRUN npm install\nCOPY . /app\n\nENTRYPOINT ["./entrypoint.sh"]\nCMD ["start"]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h3",{attrs:{id:"_12-设置默认的环境变量，映射端口和数据卷"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-设置默认的环境变量，映射端口和数据卷"}},[s._v("#")]),s._v(" 12. 设置默认的环境变量，映射端口和数据卷")]),s._v(" "),n("p",[s._v("运行 Docker 容器时很可能需要一些环境变量。在 Dockerfile 设置默认的环境变量是一种很好的方式。另外，我们应该在 Dockerfile 中设置映射端口和数据卷。示例如下:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('FROM node:7-alpine\nENV PROJECT_DIR=/app\n\nWORKDIR $PROJECT_DIR\n\nCOPY package.json $PROJECT_DIR\nRUN npm install\nCOPY . $PROJECT_DIR\n\nENV MEDIA_DIR=/media \\\n    NODE_ENV=production \\\n    APP_PORT=3000\n\nVOLUME $MEDIA_DIR\nEXPOSE $APP_PORT\n\nENTRYPOINT ["./entrypoint.sh"]\nCMD ["start"]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("ENV 指令指定的环境变量在容器中可以使用。如果你只是需要指定构建镜像时的变量，你可以使用 ARG 指令。")]),s._v(" "),n("h3",{attrs:{id:"_13-使用-label-设置镜像元数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-使用-label-设置镜像元数据"}},[s._v("#")]),s._v(" 13. 使用 LABEL 设置镜像元数据")]),s._v(" "),n("p",[s._v("使用 LABEL 指令，可以为镜像设置元数据，例如镜像创建者或者镜像说明。旧版的 Dockerfile 语法使用 MAINTAINER 指令指定镜像创建者，但是它已经被弃用了。有时，一些外部程序需要用到镜像的元数据，例如 nvidia-docker 需要用到com.nvidia.volumes.needed。示例如下:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('FROM node:7-alpine\nLABEL maintainer "jakub.skalecki@example.com"\n...\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ol",{attrs:{start:"14"}},[n("li",[s._v("添加 HEALTHCHECK\n运行容器时，可以指定--restart always选项。这样的话，容器崩溃时，Docker 守护进程 (docker daemon) 会重启容器。对于需要长时间运行的容器，这个选项非常有用。但是，如果容器的确在运行，但是不可 (陷入死循环，配置错误) 用怎么办？使用 HEALTHCHECK 指令可以让 Docker 周期性的检查容器的健康状况。我们只需要指定一个命令，如果一切正常的话返回 0，否则返回 1。对 HEALTHCHECK 感兴趣的话，可以参考这篇博客。示例如下:")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('FROM node:7-alpine\nLABEL maintainer "jakub.skalecki@example.com"\nENV PROJECT_DIR=/app\nWORKDIR $PROJECT_DIR\n\nCOPY package.json $PROJECT_DIR\nRUN npm install\nCOPY . $PROJECT_DIR\n\nENV MEDIA_DIR=/media \\\n    NODE_ENV=production \\\n    APP_PORT=3000\n\nVOLUME $MEDIA_DIR\nEXPOSE $APP_PORT\nHEALTHCHECK CMD curl --fail http://localhost:$APP_PORT || exit 1\n\nENTRYPOINT ["./entrypoint.sh"]\nCMD ["start"]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("p",[s._v("当请求失败时，curl --fail 命令返回非 0 状态。")])])}),[],!1,null,null,null);a.default=t.exports}}]);